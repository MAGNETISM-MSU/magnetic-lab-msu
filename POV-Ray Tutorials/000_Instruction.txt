
/*========================================================================================================
    Designation : POV-Ray Tutorial Instruction
    Created on  : 21 December 2018
    Author      : Wassana Daeng-am
    Location    : Computational magnetism group, Physics Department, Mahasarakham university, Thailand
==========================================================================================================*/

Download links

 For Windows: http://www.povray.org/download/
 For Linux  : http://www.povray.org/download/linux.php


Getting started (for Linux)

1. Create text file named filename.pov in the repository file on your local

2. Put some command lines to generate an object

   Remember that POV-Ray is based on left-handed coordinating system
             +y axis is pointing up
             +x axis is pointing to the right
             +z axis is pointing into the scene
       
   2.1 Include POV-Ray packages (or not is fine, it depends on your designs)
       
       For example
       
             #include "colors.inc"  for calling the standard color appeared on software
             #include "metals.inc"  for calling the metal texture applied to objects
            
   2.2 Define the position of camera
   
       location : a vector to define the position of the camera.
       look_at  : a vector to define the position that camera points at
       angle    : a float expression specifies the (horizontal) viewing angle in degrees of the camera used. 
                  keyword 'angle' can be used for zooming in (small angle) and zooming out (large angle) as well. 
       
       For eaxample, we defines that the camera is placed in x axis for 20 units which is faraway from 
       where we look at the origin with viewing angle of 90.
   
             camera {
                        location <20,0,0>
                        look_at <0,0,0>
                        angle 90
                    } 
       
       However, we can rotate the coordinate by using the command line 'sky<x,y,z>' in the camera{}. 
       For example, +z axis is set to point up.
       
             camera {
                        sky <0,0,1>
                        location <20,0,0>
                        look_at <0,0,0>
                        angle 90
                    }
                   
   2.3 Add light source into the scene
       
       POV-Ray is 3D image generator. In order to make the object more realistic, the light must be applied into the scene.
       For example,   
   
             light_source {
                             <30,30,30>
                             color rgb<1,1,1>
                          }
                         
       POV-Ray color is based on RGB color system. Therefore, we can define the color by mixing RGB color based vector              components. In this case, the color of light_source is white (rgb<1,1,1>).
   
   2.4 Set background color
   
       For the beginning, the background should be set in the scene in order to see where is the objects.
       For example, white background is set.
       
             background { color rgb<1,1,1>}
   
   2.5 Insert objects
       
       There are many types of object in the real world and also in POV-Ray. However, each object has their own keyword 
       to use in POV-Ray. For example, 
       
       2.5.1 Sphere
       
             sphere { <x,y,z>, r  texture {pigment{....}}}
             
             where  x is the distance in x axis,
                    y is the distance in y axis,
                    z is the distance in z axis, and
                    r is the radius of sphere.
       
       2.5.2 Box
        
             box { <x1,y1,z1>, 
                   <x2,y2,z2> 
                   texture {pigment{....}}
                 }
             
             where x1,y1,z1 represent the reference corner of the box and
                   x2,y2,z2 represent the opposite corner of the box.
             The size of the box is defined by the position of the corner.
       
       2.5.3 Cone
             
             cone { <x1,y1,z1>, a 
                    <x2,y2,z2>, b 
                    texture {pigment{....}}   
                  }
                  
             where x1,y1,z1 represent the position at the top of the cone which is usually set to be 0,
                   x2,y2,z2 represent the position at the bottom of the cone,
                   a is the radius at the top of cone, and  
                   b is the radius at the bottom of cone.
                   
       2.5.4 Cylinder
       
             cylinder { <x1,y1,z1> 
                        <x2,y2,z2>, a 
                        texture {pigment{....}} 
                      }
             
               where x1,y1,z1 and x2,y2,z2 represent the position at the top and bottom of the cylinder and
                     a is the radius along the cylinder. 
       
       2.5.5 Hexagon, Prism and so on.... for more info go to http://www.povray.org/
   
   2.6 Put some texture effects on objects
   
3. Render filename.pov to produce an image as one of each following command line
   3.1 povray filename.pov                    >> producing regular image with standard pixel (+a1.0)
   3.2 povray filename.pov +a0.1              >> producing high resolution image with large pixel
   3.3 povray filename.pov +H440 +W560        >> producing regular image with specified size of image
   3.4 povray filename.pov +a0.1 +H440 +W560  >> producing high resolution image with large pixel and specified size of image
4. The .png file will be produced in the same repository file with the same filename



